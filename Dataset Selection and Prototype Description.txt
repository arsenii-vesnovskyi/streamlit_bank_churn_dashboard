1. I have selected the bank churn prediction model which I have already used in the AWS and R projects (see repositories aws_ml_project and shiny_dashboard), because that allowed me to compare the ease of use of Streamlit to the tools like Shiny and AWS QuickSight in creating interactive dashboards.

2. The prototype provides the tool to explore the dataset through pre-defined and interactive visualizations, as well as to download the dataset in the needed format to deploy it in the third-party tools. It also allows the users to see the performance and the most important features for the trained AI model and make predictions for the characteristics that the user inputs through the app. Finally, the user can select any customer from the dataset and explore how the adjustments of the specific features of that customer changes the probability of it to churn, which provides a good tool for scenario analysis.

3. Among the main difficulties I experienced I can point out the fact that small things like confusion matrix can take ages to be displayed correctly, and it is not straightforward to troubleshoot and understand if it is the problem with the streamlit, library, or your data. Moreover, some libraries like mathplotlib have unresolved problems (e.g., not displaying the numbers over the plot) and have to be downgraded to display things correctly. Overall, while streamlit provides a lot of pre-configured functionalities, it is definitely less flexible than the traditional web-development tool, which is a trade-off we have to face and therefore, I also consider it an excellent tool for the prototypes but not so much for in-production apps. It was also quite difficult to deploy any css styling to overwrite the default styling of streamlit. Also making it run on EC2 was not easy due to package dependencies.
